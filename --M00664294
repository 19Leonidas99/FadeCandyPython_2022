import random
import opc
from time import sleep

client = opc.Client('localhost:7890')
LED = [(0, 0, 0)] * 360


# Leds Start ===========================================================================================================


# ========================================== Letter R Animation ========================================================
def V():
    for column in range(19, 20):
        for rows in range(0, 1):
            LED[column + rows * 60] = (255, 80, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(20, 21):
        for rows in range(0, 2):
            LED[column + rows * 60] = (255, 100, 0)
        client.put_pixels(LED)
        sleep(0.1)
    for column in range(21, 22):
        for rows in range(1, 3):
            LED[column + rows * 60] = (255, 120, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(22, 23):
        for rows in range(2, 4):
            LED[column + rows * 60] = (255, 155, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(23, 24):
        for rows in range(3, 5):
            LED[column + rows * 60] = (255, 200, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(24, 25):
        for rows in range(4, 6):
            LED[column + rows * 60] = (255, 255, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(25, 26):
        for rows in range(3, 5):
            LED[column + rows * 60] = (255, 200, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(26, 27):
        for rows in range(2, 4):
            LED[column + rows * 60] = (255, 155, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(27, 28):
        for rows in range(1, 3):
            LED[column + rows * 60] = (255, 120, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(28, 29):
        for rows in range(0, 2):
            LED[column + rows * 60] = (255, 100, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(29, 30):
        for rows in range(0, 1):
            LED[column + rows * 60] = (255, 80, 0)
        client.put_pixels(LED)
        sleep(0.1)


# ================================================ Letter S Animation ==================================================
def S():
    for column in range(37, 38):
        for rows in range(1, 3):
            LED[column + rows * 60] = (255, 80, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(36, 37):
        for rows in range(0, 2):
            LED[column + rows * 60] = (255, 105, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(32, 36):
        for rows in range(0, 1):
            LED[column + rows * 60] = (255, 110, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(31, 32):
        for rows in range(0, 2):
            LED[column + rows * 60] = (255, 130, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(30, 31):
        for rows in range(1, 2):
            LED[column + rows * 60] = (255, 150, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(32, 34):
        for rows in range(2, 3):
            LED[column + rows * 60] = (255, 130, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(34, 36):
        for rows in range(3, 4):
            LED[column + rows * 60] = (255, 130, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(36, 37):
        for rows in range(4, 6):
            LED[column + rows * 60] = (255, 110, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(37, 38):
        for rows in range(4, 5):
            LED[column + rows * 60] = (255, 80, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(32, 36):
        for rows in range(5, 6):
            LED[column + rows * 60] = (255, 110, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(31, 32):
        for rows in range(4, 6):
            LED[column + rows * 60] = (255, 130, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(32, 34):
        for rows in range(2, 3):
            LED[column + rows * 60] = (255, 130, 0)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(30, 31):
        for rows in range(3, 5):
            LED[column + rows * 60] = (255, 130, 0)
        client.put_pixels(LED)
        sleep(0.1)


# ============================================== Rock Animation ========================================================
def Rock(x):
    for column in range(1 + x, 5 + x):
        for rows in range(2, 5):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(5 + x, 18 + x):
        for rows in range(1, 6):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)


# ================================================= Scissors Animation =================================================
def Scissors(x):
    for column in range(4 + x, 15 + x):
        for rows in range(4, 6):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(4 + x, 7 + x):
        for rows in range(3, 4):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(8 + x, 11 + x):
        for rows in range(3, 4):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)
        sleep(0.1)

    openScissors(x)
    closeScissors(x)
    openScissors(x)
    closeScissors(x)
    openScissors(x)


# Fingers
# Scissors opened ======================================================================================================

def openScissors(x):
    for column in range(3 + x, 6 + x):
        for rows in range(2, 3):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(9 + x, 12 + x):
        for rows in range(2, 3):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(2 + x, 5 + x):
        for rows in range(1, 2):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(10 + x, 13 + x):
        for rows in range(1, 2):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(1 + x, 4 + x):
        for rows in range(0, 1):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)
        sleep(0.1)

        # blackout closeScissors
    for column in range(11 + x, 14 + x):
        for rows in range(0, 1):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(4 + x, 11 + x):
        for rows in range(0, 1):
            LED[column + rows * 60] = (0, 0, 0)
        client.put_pixels(LED)

    for column in range(5 + x, 10 + x):
        for rows in range(1, 2):
            LED[column + rows * 60] = (0, 0, 0)
        client.put_pixels(LED)

    for column in range(6 + x, 9 + x):
        for rows in range(2, 3):
            LED[column + rows * 60] = (0, 0, 0)
        client.put_pixels(LED)
        sleep(0.1)


# Scissors closed ======================================================================================================
def closeScissors(x):
    for column in range(4 + x, 7 + x):
        for rows in range(2, 3):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(8 + x, 11 + x):
        for rows in range(2, 3):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(4 + x, 7 + x):
        for rows in range(1, 2):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(8 + x, 11 + x):
        for rows in range(1, 2):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)
        sleep(0.1)

    for column in range(4 + x, 7 + x):
        for rows in range(0, 1):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(8 + x, 11 + x):
        for rows in range(0, 1):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)
        sleep(0.1)

        # blackout openScissors
    for column in range(0 + x, 4 + x):
        for rows in range(0, 4):
            LED[column + rows * 60] = (0, 0, 0)
        client.put_pixels(LED)

    for column in range(11 + x, 14 + x):
        for rows in range(0, 4):
            LED[column + rows * 60] = (0, 0, 0)
        client.put_pixels(LED)
        sleep(0.1)


# ========================================== Paper Animation ===========================================================
def Paper(x):
    for column in range(2 + x, 8 + x):
        for rows in range(0, 1):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(0 + x, 15 + x):
        for rows in range(1, 2):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(0 + x, 17 + x):
        for rows in range(2, 3):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(0 + x, 16 + x):
        for rows in range(3, 4):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)

    for column in range(0 + x, 14 + x):
        for rows in range(4, 5):
            LED[column + rows * 60] = (255, 178, 102)
        client.put_pixels(LED)


# ====================================== Blackout the Rock Paper Scissors Animation ====================================
def Restart_RPS():
    for column in range(0, 19):
        for rows in range(0, 6):
            LED[column + rows * 60] = (0, 0, 0)
        client.put_pixels(LED)

    for column in range(38, 60):
        for rows in range(0, 6):
            LED[column + rows * 60] = (0, 0, 0)
        client.put_pixels(LED)


# Leds End =============================================================================================================

# Rock Paper Scissors Start ============================================================================================


def RPS():  # Rock Paper Scissors Game
    pc_choices = ['1', '2', '3']
    player_choices = ['1', '2', '3', 'Q']
    Player_Score = 0
    Computer_Score = 0
    V(), S()
    print('Best of 5 Rock Paper Scissors')
    while Player_Score < 3 and Computer_Score < 3:
        Restart_RPS()
        pc = random.choice(pc_choices)
        User = input('1-Rock 2-Paper 3-Scissors\n Q-Quit\n')

        if User in player_choices:
            print(pc)
            if User == pc:  # Check for Tie
                print(f'Draw! Score Player{Player_Score} Computer {Computer_Score}')
                if User == '1':  # show same animation on both sides
                    Rock(0)
                    Rock(39)
                    sleep(2)
                elif User == '2':
                    Paper(0)
                    Paper(41)
                    sleep(2)
                else:
                    Scissors(0)
                    Scissors(39)
                    sleep(2)

            elif User == '1':
                Rock(0)
                if pc == '3':  # checks for Rock win
                    Scissors(39)
                    Player_Score += 1
                    print(f'Player wins! Score Player {Player_Score} Computer {Computer_Score} ')
                    sleep(2)

                else:  # check fo Rock loss
                    Paper(41)
                    Computer_Score += 1
                    print(f'Computer win! Player loses, Score Player {Player_Score} Computer {Computer_Score}')
                    sleep(2)

            elif User == '2':
                Paper(0)
                if pc == '1':  # checks for Paper win
                    Rock(39)
                    Player_Score += 1
                    print(f'Player wins! Score Player {Player_Score} Computer {Computer_Score}')
                    sleep(5)
                else:  # check for Paper loss
                    Scissors(39)
                    Computer_Score += 1
                    print(f'Computer win! Player loses, Score Player {Player_Score} Computer {Computer_Score}')
                    sleep(2)

            elif User == '3':
                Scissors(0)
                if pc == '2':  # checks for Scissors win
                    Paper(41)
                    Player_Score += 1
                    print(f'Player wins! Score Player {Player_Score} Computer {Computer_Score}')
                    sleep(2)
                else:  # check for Scissors loss
                    Rock(39)
                    Computer_Score += 1
                    print(f'Computer win! Player loses, Score Player {Player_Score} Computer {Computer_Score}')
                    sleep(2)

            elif User == 'Q':
                print(f'End Game\nScore Player {Player_Score} Computer {Computer_Score}')
                if Player_Score > Computer_Score:
                    print('Player won')
                elif Player_Score == Computer_Score:
                    print('Draw')
                else:
                    print('Computer Wins')
                break
        else:
            print('That is not an accepted input')


# Rock Paper Scissors End ==============================================================================================
RPS()
